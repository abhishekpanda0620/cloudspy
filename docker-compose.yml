services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: cloudspy-postgres
    environment:
      POSTGRES_DB: cloudspy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cloudspy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudspy_user -d cloudspy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:8-alpine
    container_name: cloudspy-redis
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cloudspy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudspy-backend
    environment:
      # Database
      DATABASE_URL: postgresql://cloudspy_user:cloudspy_password@postgres:5432/cloudspy
      
      # Redis
      REDIS_URL: redis://:password@redis:6379/0
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      DEBUG: false
      
      # Security
      SECRET_KEY: your-super-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # CORS
      ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
      
      # Cloud Provider Settings (set these in production)
      AWS_DEFAULT_REGION: us-east-1
      GOOGLE_APPLICATION_CREDENTIALS: /app/credentials/gcp-service-account.json
      AZURE_TENANT_ID: ${AZURE_TENANT_ID:-}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:-}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET:-}
      
      # Logging
      LOG_LEVEL: INFO
      
    volumes:
      - ./backend/credentials:/app/credentials:ro
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudspy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cloudspy-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cloudspy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: cloudspy-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - cloudspy-network
    restart: unless-stopped
    profiles:
      - production

  # Background Task Worker (Optional - for async processing)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudspy-worker
    command: celery -A main.celery worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://cloudspy_user:cloudspy_password@postgres:5432/cloudspy
      REDIS_URL: redis://:cloudspy_redis_password@redis:6379/0
      CELERY_BROKER_URL: redis://:cloudspy_redis_password@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:cloudspy_redis_password@redis:6379/2
    volumes:
      - ./backend/credentials:/app/credentials:ro
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudspy-network
    restart: unless-stopped
    profiles:
      - production

  # Celery Beat Scheduler (Optional - for scheduled tasks)
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudspy-scheduler
    command: celery -A main.celery beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://cloudspy_user:cloudspy_password@postgres:5432/cloudspy
      REDIS_URL: redis://:cloudspy_redis_password@redis:6379/0
      CELERY_BROKER_URL: redis://:cloudspy_redis_password@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:cloudspy_redis_password@redis:6379/2
    volumes:
      - ./backend/credentials:/app/credentials:ro
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudspy-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cloudspy-network:
    driver: bridge